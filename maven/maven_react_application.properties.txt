# application.properties

# spring.jpa.hibernate.ddl-auto= can be none, update, create, create-drop, refer to the Hibernate documentation for details.
# We here begin with create because we don’t have the database structure yet. After the first run, we could switch it to update
# or none according to program requirements. Use update when you want to make some change to the database structure.
# The default for H2 and other embedded databases is create-drop, but for others like MySQL is none
# It is good security practice that after your database is in production state, you make this none and revoke
# all privileges from the MySQL user connected to the Spring application, then give him only SELECT, UPDATE, INSERT, DELETE.


# create database aforismi;
# use aforismi;
# create user testikayttaja identified by 'tosisalainensana';
# GRANT ALL ON aforismi.* TO 'testikayttaja';
#create table sanonta (
#id int NOT NULL AUTO_INCREMENT,
#möläyttäjä varchar(255),
#lipsahdus text,
#PRIMARY KEY(id));


# Esitellään tietokantayhteysallas (javax.sql.DataSource)
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.jpa.hibernate.ddl-auto=none
spring.datasource.url=jdbc:mysql://localhost:3306/aforismi?useSSL=false
spring.datasource.username=testikayttaja
spring.datasource.password=tosisalainensana

spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.use_sql_comments=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.type=trace

