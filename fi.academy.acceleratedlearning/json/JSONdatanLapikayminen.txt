package BarcodeSourceAPI;

import InternalAPI.InternalAPIGame;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import java.io.*;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.List;

public class BarcodeDataHandler {

    // Creates String from the json data received from the URL
    public static String readJsonFromUrl(URL url) throws IOException, JSONException {
        InputStream is = url.openStream();
        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(is, Charset.forName("UTF-8")));
            String jsonText = readAll(reader);
            return jsonText;
        } finally {
            is.close();
        }
    }
    // Converts input data to String format
    private static String readAll(Reader reader) throws IOException {
        StringBuilder sb = new StringBuilder();
        int i;
        while ((i = reader.read()) != -1) {
            sb.append((char) i);
        }
        return sb.toString();
    }

    //TODO: Ota viivakoodi barcode-kentän sijaan barcode formats -kentästä (UPC jos on, EAN jos ei ole) duplikaattien vähentämiseksi
    //Separates desired data from json data String and returns created InternalAPIGames as a list
    public static List<InternalAPIGame> separateDataFromJson(String jsonTextResult) {
        JSONObject jsonObjectData = new JSONObject(jsonTextResult.trim());
        JSONArray jsonArray = jsonObjectData.getJSONArray("result");
        List<InternalAPIGame> InternalAPIGameList = new ArrayList<>();

        for (int i = 0; i < jsonArray.length(); i++) {
            JSONObject jsonObject = jsonArray.getJSONObject(i);
            InternalAPIGame intAPIGame = new InternalAPIGame();
            if (!jsonObject.getString("type").equals("ISBN")){
                intAPIGame.setName(jsonObject.getJSONObject("details").getString("product_name"));

                if (!jsonObject.getString("barcode").isEmpty()){
                    intAPIGame.setIsn(jsonObject.getString("barcode"));
                } else {
                    intAPIGame.setIsn(null);
                }

                if (jsonObject.getJSONObject("details").has("category")){
                    intAPIGame.setCategory_title(jsonObject.getJSONObject("details").getString("category"));
                } else {
                    intAPIGame.setCategory_title("");
                }

                if (jsonObject.getJSONObject("images").has("0")){
                    intAPIGame.setRemote_product_image_image_url(jsonObject.getJSONObject("images").getString("0"));
                } else {
                    intAPIGame.setRemote_product_image_image_url("");
                }
                InternalAPIGameList.add(intAPIGame);
            }
        }
        return InternalAPIGameList;
    }
}