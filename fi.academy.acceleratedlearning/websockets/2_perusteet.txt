package eu.fi.hki.maven;

// Javan luokkakirjasto java.net on verkkoliikenne, pistokkeet (socket) ja URL

import org.springframework.context.annotation.Configuration;
import org.springframework.messaging.simp.config.MessageBrokerRegistry;
import org.springframework.web.socket.config.annotation.AbstractWebSocketMessageBrokerConfigurer;
import org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;
import org.springframework.web.socket.config.annotation.StompEndpointRegistry;

@Configuration
@EnableWebSocketMessageBroker // Luo viestinvälittäjän ja mahdollistaa websocketien käytön
public class KonfigurointiWebSocketPistoke extends AbstractWebSocketMessageBrokerConfigurer {

    @Override
    public void registerStompEndpoints(StompEndpointRegistry registry) {

        // Määrittelee STOMP-protokollalle osoitteen, johon selain ottaa yhteyttä rekisteröityäkseen
        registry.addEndpoint("/rekisteroidy");

        // Määrittelee SockJS fallback-tuen, jota käytetään mikäli käyttäjän selain ei tue websocketteja
        registry.addEndpoint("rekisteroidy").withSockJS();
    }


    @Override
    public void configureMessageBroker(MessageBrokerRegistry config) {

        // Sisääntulokanava, johon tullut liikenne ohjataan edelleen viestinvälittäjälle
        config.setApplicationDestinationPrefixes("/pistoke");

        // Luo viestinvälittäjälle murupolun, jota pitkin vastaukset lähetetään käyttäjälle
        config.enableSimpleBroker("/keskustelunaihe_ulos");
    }
}

// ***************************************************************************************************************************************

package eu.fi.hki.maven;

import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.handler.annotation.SendTo;
import org.springframework.stereotype.Controller;

import java.text.SimpleDateFormat;
import java.util.Date;

@Controller
public class NaruistaVetelijaKontrolleri {

    // Koska pistokkeen eli WebSocketin konfiguraatiossa on määritelty ns. juuren murupoluksi "/pistoke",
    // vastaanottaa tämä Spring Kontrollerin metodi "send" murupolkuun "pistoke/viestit_sisaan" saapuvat viestilähetykset
    // selaimen STOMP-protokollan asiakkaalta eli HTML:n index-sivulla JavaScriptissä
    // Stomp.over(new SockJS('/rekisteroidy'))
    @MessageMapping("/viestit_sisaan")
    // Saapunut viesti käsitellään ja sen jälkeen se lähetetään tässä määriteltyyn osoitteeseen,
    @SendTo("/keskustelunaihe_ulos/viestisanoma")
    // josta kaikki keskusteluaiheen seuraajat (tilaajat) vastaanottavat lähetyksen
    public UlosLahtevaViesti kasitteleSaapuvaviestiLahetettavaksi(SaapuvaViesti sanoma) throws Exception {

        String ajankohta = new SimpleDateFormat("HH:mm").format(new Date());
        return new UlosLahtevaViesti(sanoma.getLahettaja(), sanoma.getViestinteksti(), ajankohta);
    }
}

// ***************************************************************************************************************************************

package eu.fi.hki.maven;

public class SaapuvaViesti {

    private String lahettaja;
    private String viestinteksti;

    public String getLahettaja() {
        return lahettaja;
    }

    public String getViestinteksti() {
        return viestinteksti;
    }
}

// ***************************************************************************************************************************************

package eu.fi.hki.maven;

public class UlosLahtevaViesti {

    private String lahettaja;
    private String viestinteksti;
    private String aika;

    public UlosLahtevaViesti(String lahettaja, String viestinteksti, String aika) {
        this.lahettaja = lahettaja;
        this.viestinteksti = viestinteksti;
        this.aika = aika;
    }

    public String getLahettaja() {
        return lahettaja;
    }

    public String getViestinteksti() {
        return viestinteksti;
    }

    public String getAika() {
        return aika;
    }
}

// ***************************************************************************************************************************************

package eu.fi.hki.maven;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class SovellusApplication {

    public static void main(String[] args) {
        SpringApplication.run(SovellusApplication.class, args);
    }
}

// ***************************************************************************************************************************************

<html>
<head>
    <title>Pistoke-WebSocket tsättäilyyn</title>

<!--
    Long polling is known to cause problems on Heroku, but a workaround for SockJS is available.
    https://github.com/sockjs/sockjs-node/issues/57#issuecomment-5242187
-->
    <script src="https://cdn.jsdelivr.net/npm/sockjs-client@1/dist/sockjs.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/sockjs-client/1.1.1/sockjs.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/stomp.js/2.3.3/stomp.min.js"></script>

    <script type="text/javascript">

        var stompClient = null;

        function setConnected(connected) {
            document.getElementById('connect').disabled = connected;
            document.getElementById('disconnect').disabled = !connected;
            document.getElementById('conversationDiv').style.visibility
                = connected ? 'visible' : 'hidden';
            document.getElementById('response').innerHTML = '';
        }

        function connect() {
            var socket = new SockJS('/rekisteroidy');
            stompClient = Stomp.over(socket);
            stompClient.connect({}, function(frame) {
                setConnected(true);
                console.log('Connected: ' + frame);
                stompClient.subscribe('/keskustelunaihe_ulos/viestisanoma', function(saapuvaViestiOlio) {
                    naytaNettisivullaKaikilleJonkunViesti(JSON.parse(saapuvaViestiOlio.body));
                });
            });
        }

        function disconnect() {
            if(stompClient != null) {
                stompClient.disconnect();
            }
            setConnected(false);
            console.log("Disconnected");
        }

        function lahetaViesti() {
            var kukaLahettaja = document.getElementById('kenelta').value;
            var nettiNapyttelyt = document.getElementById('raakateksti').value;

            console.log("Viestin lähetys JSON-oliona onnistuu");
            stompClient.send("/pistoke/viestit_sisaan", {},
                JSON.stringify({'lahettaja':kukaLahettaja, 'viestinteksti':nettiNapyttelyt}));
        }

        function naytaNettisivullaKaikilleJonkunViesti(viesti) {
            var response = document.getElementById('response');
            var p = document.createElement('p');
            p.style.wordWrap = 'break-word';
            p.appendChild(document.createTextNode(viesti.lahettaja + ": "
                + viesti.viestinteksti + " (" + viesti.aika + ")"));
            response.appendChild(p);
        }
    </script>
</head>
<body onload="disconnect()">
<div>
    <div>
        <input type="text" id="kenelta" placeholder="Valitse kutsumanimi"/>
    </div>
    <br />
    <div>
        <button id="connect" onclick="connect();">Avaa yhteys</button>
        <button id="disconnect" disabled="disabled" onclick="disconnect();">
            Sulje yhteys
        </button>
    </div>
    <br />
    <div id="conversationDiv">
        <input type="text" id="raakateksti" placeholder="Kirjoita viesti: "/>
        <button id="sendMessage" onclick="lahetaViesti();">Lähetä</button>
        <p id="response"></p>
    </div>
</div>

</body>
</html>
